<?php
/**
 * This file contains the database helper class
 * @package teachcourses
 * @subpackage core
 * @license http://www.gnu.org/licenses/gpl-2.0.html GPLv2 or later
 * @since 8.0.0
 */

/**
 * Contains database helper functions
 * @package teachcourses
 * @subpackage database
 * @since 5.0.0
 */
class tc_DB_Helpers {
    
    /**
     * Extract column settings from a string
     * @param string $data      The data string has the following structure: name1 = {value1}, name2 = {value2}, ...
     * @return array
     * @since 5.0.0
     */
    public static function extract_column_data ($data) {
        $return = array();
        $data = explode(',', $data);
        foreach ( $data as $row ) {
            $row = explode(' = ', $row);
            $name = trim($row[0]);
            $value = str_replace(array('{','}'), array('',''), trim($row[1]));
            $return[$name] = $value;
        }
        return $return;
    }
    
    /**
     * Generate a where clause
     * @param string $input         An array with values
     * @param string $column        Name of the table column
     * @param string $connector     The connector: AND, OR
     * @param string $operator      The operator: = !=
     * @param string $pattern       Things like %
     * @return string
     * @since 5.0.0
     */
    public static function generate_where_clause($input, $column, $connector = 'AND', $operator = '=', $pattern = '') {
        $end = '';
        if ($input === '' || $input === 0) {
            return;
        }
        
        $array = explode(",", $input);
        foreach ( $array as $element ) {
            $element = esc_sql( htmlspecialchars( trim($element) ) );
            if ( $element === '' ) {
                continue;
            }
            if ( $pattern != '' ) { $element = $pattern . $element . $pattern; }
            $end = ( $end == '' ) ? "$column $operator '$element'" : $end . " $connector $column $operator '$element'";
        }
        
        return $end;
    }
    
    /**
     * Sets clause parts from the $parts[] array together to one clause string
     * 
     * Example: 
     * $where = array();
     * $where[] = tc_db_helpers::where_clause_part('1,2,3', "u.id", "OR", "=");
     * $where[] = tc_db_helpers::where_clause_part('Max', "u.user", "OR", "=");
     * echo tc_db_helpers::compose_clause($where);
     * 
     * @param array $parts          An array of where parts. Each element should be generated by the where_clause_part() method
     * @param string $connector     Can be used to change the logical connector between the clause parts. Default: AND
     * @para, string $clause_part   The SQL code word for the part Default: WHERE. Optional: GROUP BY
     * @return string
     * @since 8.0.0
     */
    public static function compose_clause( $parts = array(), $connector = 'AND', $clause_part = 'WHERE' ) {
        // If there is nothing to do
        if ( empty( $parts ) ) {
            return '';
        }

        // Set all parts together to one WHERE clause
        $where = '';
        foreach ( $parts as $row ) {
            if ( empty( $row ) ) {
                continue;
            }
            $where = ( $where != '' ) ? $where . " $connector ( $row )" : " ( $row ) ";
        }
        if ( $where === '' ) {
            return;
        }
        return " $clause_part $where";
    }
    
    /**
     * Register a new table column in teachcourses
     * @param string $table
     * @param string $column
     * @param array $data
     * @since 5.0.0
     */
    public static function register_column ($table, $column, $data) {
        $value = 'name = {' . $column. '}, title = {' . $data['title'] . '}, type = {' . $data['type'] . '}, required = {' . $data['required'] . '}, min = {' . $data['min'] . '}, max = {' . $data['max'] . '}, step = {' . $data['step'] . '}, visibility = {' . $data['visibility'] . '}';
        tc_Options::add_option($column, $value, $table);
    }
    
    /**
     * Returns the indexes of a given table
     * @param string $db_name
     * @return array
     * @since 7.0.0
     */
    public static function get_db_index ($db_name) {
        global $wpdb;
        return $wpdb->get_results("SHOW INDEX FROM " . $db_name, ARRAY_A);
    }
    
}